----------------------------------
MVC ( Model-View-Controller ) 
* Model: มีโครงสร้างข้อมูลสำหรับแทนสิ่งของในแอปพลิเคชัน เช่น User, Product, หรือ Event.

* View: มีส่วนที่เกี่ยวข้องกับการแสดงผลแบบต่างๆ เช่น หน้าจอล็อกอิน, หน้าจอรายการสินค้า, หรือ หน้าจอรายละเอียดสินค้า.

* Controller: จัดการกับข้อมูลและการแสดงผล ตัวอย่างเช่น การดึงข้อมูลผู้ใช้จากฐานข้อมูลและนำมาแสดงผลบนหน้าจอ.

การใช้งาน:
* เหมาะสำหรับโปรเจคที่มีการแบ่งหน้าที่และควบคุมที่ชัดเจนระหว่างข้อมูล (Model), การแสดงผล (View), และควบคุมการทำงาน (Controller)
* ใช้งานได้ดีสำหรับโปรเจคที่มีความเรียบง่ายและไม่ซับซ้อนมาก

----------------------------------
MVVM ( Model-View-ViewModel )
* Model:  มีโครงสร้างข้อมูลสำหรับแทนสิ่งของในแอปพลิเคชัน เช่น User, Product, หรือ Event.

* View: แสดงผลแบบต่างๆ เช่น เลย์เอาต์สำหรับข้อมูลผู้ใช้, และองค์ประกอบ UI อื่นๆ.

* ViewModel: จัดการกับสถานะและการแสดงผลของ View โดยตรง, เช่น การตรวจสอบข้อมูลก่อนการแสดงผล, การจัดรูปแบบข้อมูล เพื่อให้ View สามารถแสดงผลได้อย่างเหมาะสม.

การใช้งาน:
* เหมาะสำหรับโปรเจคที่มีการทำงานกับข้อมูลที่ซับซ้อน โดย ViewModel ใช้เป็นช่องทางในการจัดการและแปลงข้อมูลเพื่อให้ View สามารถแสดงผลได้อย่างเหมาะสม
* มีประสิทธิภาพในการทำงานกับ UI ที่ซับซ้อนและการทำงานกับข้อมูลที่มีการอัปเดตบ่อยครั้ง

----------------------------------
MVP ( Model-View-Presenter ) 
* Model: มีโครงสร้างข้อมูลสำหรับแทนสิ่งของในแอปพลิเคชัน เช่น User, Product, หรือ Event.

* View: แสดงผลและติดต่อกับผู้ใช้ เช่น ฟอร์มการสมัครสมาชิก, หน้าหลัก, หรือ หน้าต่างการตั้งค่า.

* Presenter: จัดการกับการตอบสนองจากผู้ใช้ และประมวลผลข้อมูล ตัวอย่างเช่น การตรวจสอบการตั้งค่า, การอัปเดตข้อมูลหน้าจอ.

การใช้งาน:
* เหมาะสำหรับโปรเจคที่มีการแยกหน้าที่ของการแสดงผลและการจัดการข้อมูลอย่างชัดเจน
* Presenter ใช้เป็นช่องทางในการติดต่อระหว่าง Model และ View โดยไม่มีการสร้างความเชื่อมโยงตรงระหว่าง View และ Model

----------------------------------
VIPER ( View-Interactor-Presenter-Entity-Routing )
* View: แสดงผลและติดต่อกับผู้ใช้ ซึ่งจะไม่มีการรับผิดชอบในการประมวลผลข้อมูล.

* Interactor: มีหน้าที่ในการจัดการกับข้อมูลและธุรกรรมทางธุรกิจ เช่น การดึงข้อมูลจากเซิร์ฟเวอร์, การจัดการข้อมูลหรือการโต้ตอบกับฐานข้อมูล.

* Presenter: จัดการกับการแสดงผลและประมวลผลข้อมูล เช่น การกำหนดรูปแบบข้อมูลสำหรับการแสดงผล, การควบคุมการประมวลผลโดยตรง.

* Entity: โครงสร้างข้อมูลสำหรับแทนสิ่งของในแอปพลิเคชัน ใช้เป็นฐานข้อมูลหรือตัวแทนข้อมูล.

* Routing: จัดการกับการเปลี่ยนแปลงและการนำทางระหว่างหน้าจอ, เช่น การสร้างเส้นทางการนำทางและการนำทางผ่านหน้าจอ.


การใช้งาน:
* เหมาะสำหรับโปรเจคที่มีความซับซ้อนและมีความสำคัญต่อการทดสอบ (testability) โดยมีการแบ่งหน้าที่เป็นชั้นๆ ในการทำงาน
* แต่ละส่วนมีความเป็นอิสระกันและมีการเชื่อมต่อผ่านอินเทอร์เฟซ


